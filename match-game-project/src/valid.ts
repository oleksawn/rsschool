interface Form {
  getDataFromForm(): { [index: string]: string };
  validError(field: string, errorMsg: string) : void;
  validSuccess(field: string) : void;
  validateInput(e: Event) : void;
  validateForm(): boolean;
  cleanForm() : void;
}
export const form : Form = {
  getDataFromForm() {
    console.log("form.getDataFromForm()");
    const inputsArr : NodeListOf<HTMLInputElement> = document.querySelectorAll('.logForm input');
    const data : {[index: string]: string} = {};
    console.log(inputsArr);
    inputsArr.forEach((el) => {
      data[el.id] = el.value;
    });
    return data;
  },
  validError(field : string, errorMsg : string) {
    // hide ok sign  
    const clOk = `.ok_${field}`;
    const okEl : HTMLElement = document.querySelector(clOk) as HTMLElement;
    okEl.style.display = 'none';
    // show err field
    const clErr = `.err_${field}`;
    const errEl : HTMLElement = document.querySelector(clErr) as HTMLElement;
    errEl.style.display = 'block';
    // show error message
    const clErrMsg = `${clErr} .err_message`;
    const errElMsg : HTMLElement = document.querySelector(clErrMsg) as HTMLElement;
    errElMsg.innerHTML = errorMsg;
    // Log in button unactive
    const addBtn : HTMLElement = document.getElementById('addButton') as HTMLElement;
    addBtn.classList.remove('addButton_active');
  },
  validSuccess(field : string) {
    console.log("success input");
    // show ok sign
    const clOk = `.ok_${field}`;
    const okEl : HTMLElement = document.querySelector(clOk) as HTMLElement;
    okEl.style.display = 'block';
    // hide error
    const clErr = `.err_${field}`;
    const errEl : HTMLElement = document.querySelector(clErr) as HTMLElement;
    errEl.style.display = 'none';
    // check if all inputs vadid
    if (form.validateForm()) {
      const addBtn : HTMLElement = document.getElementById('addButton') as HTMLElement;
      addBtn.classList.add('addButton_active');
    }
  },
  validateInput(e: Event) {
    console.log("generated by addEventListener in controller.js formRoute()");
    const type = (e.target as HTMLInputElement).getAttribute('type');
    const val = (e.target as HTMLInputElement).value;
    let isError = false;
    if (val === '') {
      console.log("val", val);
      isError = true;
      form.validError((e.target as HTMLInputElement).id, 'Error: at least one simbol required!');
    }
    else if (/^([a-zA-Z0-9]+)$/.test(val) === false && type === 'text') {
      isError = true;
      form.validError((e.target as HTMLInputElement).id, 'Error: just letters and numbers allowed!');
    }
    else if (/[a-zA-Z]+/.test(val) === false && type === 'text') {
      isError = true;
      form.validError((e.target as HTMLInputElement).id, 'Error: field can\'t consist of numbers only!');
    }
    else if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/.test(val) === false && type === 'email') {
      isError = true;
      form.validError((e.target as HTMLInputElement).id, 'Error: mail should be correct!');
    }
    else if (val.length > 30) {
      isError = true;
      form.validError((e.target as HTMLInputElement).id, 'Error: maximum 30 symbols allowed!');
    }

    console.log("isError ", isError);
    if (isError === false) {
      form.validSuccess((e.target as HTMLInputElement).id);
    }
  },
  validateForm() {
    console.log("generated by addEventListener in controller.js formRoute()");
    const okArr : NodeListOf<HTMLElement> = document.querySelectorAll('.ok');
    let isAllInputsValid = true;
    okArr.forEach((el) => {
      if (el.style.display === 'none' || el.style.display === '') {
        console.log("into false", el);
        isAllInputsValid = false;
      }
    });
    if (isAllInputsValid !== true) {
      return false;
    }
    return true;
  },
  cleanForm() {
    console.log("generated by addEventListener in controller.js formRoute()");
    const inputsArr : NodeListOf<HTMLInputElement> = document.querySelectorAll('.logForm .wrapper input');
    inputsArr.forEach((el) => {
      el.value = '';
      // hide ok buttons
      const clOk  = `.ok_${el.id}`;
      const okEl : HTMLElement = document.querySelector(clOk) as HTMLElement;
      okEl.style.display = 'none';
      // hide err messages
      const clErr = `.err_${el.id}`;
      const errEl : HTMLElement= document.querySelector(clErr) as HTMLElement;
      errEl.style.display = 'none';
    });
    const addBtn: HTMLElement = document.getElementById('addButton') as HTMLElement;
    addBtn.classList.remove('addButton_active');
  }
}